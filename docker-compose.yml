services:
  mariadb:
    image: 'mariadb:latest'
    hostname: mariadb
    ports:
      - '3306:3306'
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
      MYSQL_DATABASE: metastore_db
    volumes:
      - ./mariadb-data:/var/lib/mysql
    networks:
      - iceberg_net
  spark-iceberg:
    image: tabulario/spark-iceberg
    container_name: spark-iceberg
    build: spark/
    networks:
      iceberg_net:
    depends_on:
      - rest
      - minio
    volumes:
      - ./warehouse:/home/iceberg/warehouse
      - ./notebooks:/home/iceberg/notebooks/notebooks
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    ports:
      - 8888:8888
      - 8889:8080
      - 10000:10000
      - 10001:10001
  rest:
    image: apache/iceberg-rest-fixture
    container_name: iceberg-rest
    networks:
      iceberg_net:
    ports:
      - 8181:8181
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
      - CATALOG_WAREHOUSE=s3://warehouse/
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_ENDPOINT=http://minio:9000
  hive-metastore:
    platform: linux/amd64  # ✅ Force running on amd64 emulation
    hostname: hive-metastore
    image: 'bitsondatadev/hive-metastore:latest'
    ports:
      - '9083:9083'
    volumes:
      - ./conf/metastore-site.xml:/opt/apache-hive-metastore-3.0.0-bin/conf/metastore-site.xml:ro
    environment:
      METASTORE_DB_HOSTNAME: mariadb
    depends_on:
      - mariadb
    networks:
      - iceberg_net
  trino:
    image: trinodb/trino:latest
    container_name: trino
    networks:
      iceberg_net:
    ports:
      - "8080:8080"
    volumes:
      - ./etc:/etc/trino
  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_DOMAIN=minio
    networks:
      iceberg_net:
        aliases:
          - warehouse.minio
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]
  mc:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    networks:
      iceberg_net:
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    entrypoint: |
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force minio/warehouse;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc policy set public minio/warehouse;
      tail -f /dev/null
      "
  mlflow:
    platform: linux/amd64  # ✅ Force running on amd64 emulation
    build: 
      context: .
      dockerfile: Dockerfile.mlflow  # Custom Dockerfile to install psycopg2
    container_name: mlflow_server
    restart: always
    env_file:   # ✅ This loads the .env file
      - .env
    environment:
      MLFLOW_TRACKING_URI: http://0.0.0.0:5001
      MLFLOW_BACKEND_STORE_URI: postgresql://mlflow:${POSTGRES_PASSWORD}@103.91.187.204:5432/mlflow_db
      MLFLOW_ARTIFACT_ROOT: s3://mlflow/
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      MLFLOW_TRACKING_USERNAME: ${MLFLOW_USERNAME}
      MLFLOW_TRACKING_PASSWORD: ${MLFLOW_PASSWORD}
    command: >
      mlflow server 
      --host 0.0.0.0 
      --port 5001
      --backend-store-uri postgresql://mlflow:${POSTGRES_PASSWORD}@103.91.187.204:5432/mlflow_db 
      --artifacts-destination s3://mlflow/
      --serve-artifacts
    networks:
      - iceberg_net
    ports:
      - "5001:5001"
    depends_on:
      - minio
  questdb:
    image: questdb/questdb:8.2.1
    container_name: questdb
    networks:
      - iceberg_net
    ports:
      - "8812:8812"  # Expose only the PostgreSQL port
    volumes:
      - questdb_data:/var/lib/questdb
    environment:
      - QDB_PG_READONLY_USER_ENABLED=true  # Enable read-only user for PostgreSQL
    restart: unless-stopped
volumes:
  questdb_data:
networks:
  iceberg_net: